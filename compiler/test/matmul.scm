(let ((pi 3.141592653589793)) (let ((pio2 1.5707963267948966)) (let ((pio4 0.7853981633974483)) (letrec ((copysign (lambda (x) (if (<. x 0.0) -1.0 1.0)))) (letrec ((copysign-int (lambda (x) (if (< x 0) -1 1)))) (letrec ((div-iter (lambda (m n count) (if (< m n) count (div-iter (- m n) n (+ count 1)))))) (letrec ((/ (lambda (m n) (let ((m-flag (copysign-int m)) (n-flag (copysign-int n))) (let ((abs-m (* m-flag m)) (abs-n (* n-flag n))) (* m-flag (* n-flag (div-iter abs-m abs-n 0)))))))) (letrec ((modulo (lambda (m n) (let ((q (/ m n))) (- m (* q n)))))) (letrec ((fequal (lambda (m n) (=. m n)))) (letrec ((fless (lambda (m n) (<. m n)))) (letrec ((fispos (lambda (n) (<. 0.0 n)))) (letrec ((fisneg (lambda (n) (<. n 0.0)))) (letrec ((fiszero (lambda (n) (=. n 0.0)))) (letrec ((floor (lambda (n) (if (=. (/. n (itof (ftoi n))) 1.0) n (let ((flag (copysign n))) (let ((abs-n (*. n flag))) (if (<. flag 0.0) (itof (- 0 (ftoi (+. abs-n 0.5)))) (if (<. abs-n 0.5) 0.0 (itof (ftoi (-. abs-n 0.5))))))))))) (letrec ((fhalf (lambda (n) (*. n 0.5)))) (letrec ((fsqr (lambda (n) (*. n n)))) (letrec ((fabs (lambda (n) (if (<. n 0.0) (-. 0.0 n) n)))) (letrec ((fneg (lambda (n) (-. 0.0 n)))) (letrec ((sqrt (lambda (a) (letrec ((sqrtinv (lambda (a) (letrec ((init-a (lambda (a x) (if (<. (*. x x) a) (init-a a (+. x 1.0)) (/. 1.0 x))))) (letrec ((sqrtinv-iter (lambda (a x g) (let ((h (-. 1.0 (*. a (*. x x))))) (if (>=. (fabs h) (fabs g)) x (sqrtinv-iter a (+. x (*. x (*. h (/. (+. 8.0 (*. h (+. 6.0 (*. 5.0 h)))) 16.0)))) h)))))) (sqrtinv-iter a (init-a a 1.0) 1.0)))))) (if (=. a 0.0) 0.0 (*. a (sqrtinv a))))))) (letrec ((reduction-2pi (lambda (x) (letrec ((loop1 (lambda (x p) (if (<. x p) p (loop1 x (*. 2.0 p)))))) (letrec ((loop2 (lambda (x p) (if (<. x (*. 2.0 pi)) x (if (<. x p) (loop2 x (/. p 2.0)) (loop2 (-. x p) (/. p 2.0))))))) (let ((p (loop1 x (*. 2 pi)))) (loop2 x p))))))) (letrec ((kernel-sin (lambda (x) (let ((s1 -0.16666666666666616) (s2 0.008333333333320002) (s3 -1.984126982840213e-4) (s4 2.7557313299015054e-6) (s5 -2.5050705846378875e-8) (s6 1.5894136371952154e-10) (u (*. x x))) (+. (*. x (*. u (+. s1 (*. u (+. s2 (*. u (+. s3 (*. u (+. s4 (*. u (+. s5 (*. u s6)))))))))))) x))))) (letrec ((kernel-cos (lambda (x) (let ((c1 -0.5) (c2 0.04166666666666645) (c3 -0.0013888888888861108) (c4 2.4801587283886827e-5) (c5 -2.75573130991395e-7) (c6 2.087558253975872e-9) (c7 -1.1353387007200546e-11) (u (*. x x))) (+. (*. u (+. c1 (*. u (+. c2 (*. u (+. c3 (*. u (+. c4 (*. u (+. c5 (*. u (+. c6 (*. u c7))))))))))))) 1.0))))) (letrec ((sin (lambda (x) (let ((flag1 (copysign x)) (abs-x (fabs x))) (let ((x1 (reduction-2pi abs-x))) (let ((x2 (if (<. x1 pi) x1 (-. x1 pi))) (flag2 (if (<. x1 pi) flag1 (-. 0.0 flag1)))) (let ((x3 (if (<. x2 pio2) x2 (-. pi x2)))) (if (>. x3 pio4) (*. flag2 (kernel-cos (-. pio2 x3))) (*. flag2 (kernel-sin x3)))))))))) (letrec ((cos (lambda (x) (let ((flag1 1.0) (abs-x (fabs x))) (let ((x1 (reduction-2pi abs-x))) (let ((x2 (if (<. x1 pi) x1 (-. x1 pi))) (flag2 (if (<. x1 pi) flag1 (-. 0.0 flag1)))) (let ((x3 (if (<. x2 pio2) x2 (-. pi x2))) (flag3 (if (<. x2 pio2) flag2 (-. 0.0 flag2)))) (if (>. x3 pio4) (*. flag3 (kernel-sin (-. pio2 x3))) (*. flag3 (kernel-cos x3)))))))))) (letrec ((kernel-atan (lambda (x) (let ((a1 -0.3333333) (a2 0.2) (a3 -0.142857142) (a4 0.111111104) (a5 -0.08976446) (a6 0.060035485) (u (*. x x))) (+. (*. x (*. u (+. a1 (*. u (+. a2 (*. u (+. a3 (*. u (+. a4 (*. u (+. a5 (*. u a6)))))))))))) x))))) (letrec ((atan (lambda (x) (let ((flag (copysign x)) (abs-x (fabs x))) (if (<. abs-x 0.4375) (*. flag (kernel-atan abs-x)) (if (<. abs-x 2.4375) (*. flag (+. pio4 (kernel-atan (/. (-. abs-x 1.0) (+. abs-x 1.0))))) (*. flag (-. pio2 (kernel-atan (/. 1.0 abs-x)))))))))) (letrec ((int_of_float (lambda (n) (let ((flag (copysign n))) (let ((abs-n (*. flag n))) (if (<. abs-n 0.5) 0 (if (<. flag 0.0) (- 0 (ftoi (-. abs-n 0.5))) (ftoi (-. abs-n 0.5))))))))) (letrec ((float_of_int (lambda (n) (itof n)))) (letrec ((create_array (lambda (n x) (make-vector n x)))) (letrec ((print_char (lambda (n) (write-byte n)))) (letrec ((print_int (lambda (n) (letrec ((print_int-iter (lambda (n) (let ((q (/ n 10))) (let ((r (- n (* q 10)))) (if (= q 0) (let ((b (+ n 48))) (write-byte b)) (let ((dummy (print_int-iter q))) (write-byte (+ r 48))))))))) (if (< n 0) (let ((dummy (write-byte 45))) (print_int-iter (- 0 n))) (print_int-iter n)))))) (letrec ((read-word (lambda () (let ((r3 (read-byte)) (r2 (read-byte)) (r1 (read-byte)) (r0 (read-byte))) (let ((b3 (sll r3 24)) (b2 (sll r2 16)) (b1 (sll r1 8)) (b0 r0)) (logor b3 (logor b2 (logor b1 b0)))))))) (letrec ((read_float (lambda (ignore) (read-word)))) (letrec ((read_int (lambda (ignore) (read-word)))) (letrec ((mul (lambda (l m n a b c) (letrec ((loop1 (lambda (i) (if (< i 0) 0 (letrec ((loop2 (lambda (j) (if (< j 0) 0 (letrec ((loop3 (lambda (k) (if (< k 0) 0 (let ((Tu1 (vector-set! (vector-ref c i) j (+. (vector-ref (vector-ref c i) j) (*. (vector-ref (vector-ref a i) k) (vector-ref (vector-ref b k) j)))))) (loop3 (- k 1))))))) (let ((Tu2 (loop3 (- m 1)))) (loop2 (- j 1)))))))) (let ((Tu3 (loop2 (- n 1)))) (loop1 (- i 1)))))))) (loop1 (- l 1)))))) (let ((dummy (make-vector 0 0.0))) (letrec ((make (lambda (m n) (let ((mat (make-vector m dummy))) (letrec ((init (lambda (i) (if (< i 0) 0 (let ((Tu4 (vector-set! mat i (make-vector n 0.0)))) (init (- i 1))))))) (let ((Tu5 (init (- m 1)))) mat)))))) (let ((a (make 2 3))) (let ((b (make 3 2))) (let ((c (make 2 2))) (let ((Tu21 (vector-set! (vector-ref a 0) 0 1.0))) (let ((Tu20 (vector-set! (vector-ref a 0) 1 2.0))) (let ((Tu19 (vector-set! (vector-ref a 0) 2 3.0))) (let ((Tu18 (vector-set! (vector-ref a 1) 0 4.0))) (let ((Tu17 (vector-set! (vector-ref a 1) 1 5.0))) (let ((Tu16 (vector-set! (vector-ref a 1) 2 6.0))) (let ((Tu15 (vector-set! (vector-ref b 0) 0 7.0))) (let ((Tu14 (vector-set! (vector-ref b 0) 1 8.0))) (let ((Tu13 (vector-set! (vector-ref b 1) 0 9.0))) (let ((Tu12 (vector-set! (vector-ref b 1) 1 10.0))) (let ((Tu11 (vector-set! (vector-ref b 2) 0 11.0))) (let ((Tu10 (vector-set! (vector-ref b 2) 1 12.0))) (let ((Tu9 (mul 2 3 2 a b c))) (let ((Tu8 (print_int (int_of_float (vector-ref (vector-ref c 0) 0))))) (let ((Tu7 (print_int (int_of_float (vector-ref (vector-ref c 0) 1))))) (let ((Tu6 (print_int (int_of_float (vector-ref (vector-ref c 1) 0))))) (print_int (int_of_float (vector-ref (vector-ref c 1) 1)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
