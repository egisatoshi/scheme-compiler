(let-global ((n_objects (make-vector 1 0))) (let-global ((objects (let ((dummy (make-vector 0 0.0))) (make-vector 60 (vector 0 0 0 0 dummy dummy #f dummy dummy dummy dummy))))) (let-global ((screen (make-vector 3 0.0))) (let-global ((viewpoint (make-vector 3 0.0))) (let-global ((light (make-vector 3 0.0))) (let-global ((beam (make-vector 1 255.0))) (let-global ((and_net (make-vector 50 (make-vector 1 -1)))) (let-global ((or_net (make-vector 1 (make-vector 1 (vector-ref and_net 0))))) (let-global ((solver_dist (make-vector 1 0.0))) (let-global ((intsec_rectside (make-vector 1 0))) (let-global ((tmin (make-vector 1 1.0e9))) (let-global ((intersection_point (make-vector 3 0.0))) (let-global ((intersected_object_id (make-vector 1 0))) (let-global ((nvector (make-vector 3 0.0))) (let-global ((texture_color (make-vector 3 0.0))) (let-global ((diffuse_ray (make-vector 3 0.0))) (let-global ((rgb (make-vector 3 0.0))) (let-global ((image_size (make-vector 2 0))) (let-global ((image_center (make-vector 2 0))) (let-global ((scan_pitch (make-vector 1 0.0))) (let-global ((startp (make-vector 3 0.0))) (let-global ((startp_fast (make-vector 3 0.0))) (let-global ((screenx_dir (make-vector 3 0.0))) (let-global ((screeny_dir (make-vector 3 0.0))) (let-global ((screenz_dir (make-vector 3 0.0))) (let-global ((ptrace_dirvec (make-vector 3 0.0))) (let-global ((dirvecs (let ((dummyf (make-vector 0 0.0))) (let ((dummyff (make-vector 0 dummyf))) (let ((dummy_vs (make-vector 0 (vector dummyf dummyff)))) (make-vector 5 dummy_vs)))))) (let-global ((light_dirvec (let ((dummyf2 (make-vector 0 0.0))) (let ((v3 (make-vector 3 0.0))) (let ((consts (make-vector 60 dummyf2))) (vector v3 consts)))))) (let-global ((reflections (let ((dummyf3 (make-vector 0 0.0))) (let ((dummyff3 (make-vector 0 dummyf3))) (let ((dummydv (vector dummyf3 dummyff3))) (make-vector 180 (vector 0 dummydv 0.0))))))) (let-global ((n_reflections (make-vector 1 0))) (let ((pi 3.141592653589793)) (let ((pio2 1.5707963267948966)) (let ((pio4 0.7853981633974483)) (letrec ((copysign (lambda (x) (if (<. x 0.0) -1.0 1.0)))) (letrec ((copysign-int (lambda (x) (if (< x 0) -1 1)))) (letrec ((div-iter (lambda (m n count) (if (< m n) count (div-iter (- m n) n (+ count 1)))))) (letrec ((/ (lambda (m n) (let ((m-flag (copysign-int m)) (n-flag (copysign-int n))) (let ((abs-m (* m-flag m)) (abs-n (* n-flag n))) (* m-flag (* n-flag (div-iter abs-m abs-n 0)))))))) (letrec ((modulo (lambda (m n) (let ((q (/ m n))) (- m (* q n)))))) (letrec ((fequal (lambda (m n) (=. m n)))) (letrec ((fless (lambda (m n) (<. m n)))) (letrec ((fispos (lambda (n) (<. 0.0 n)))) (letrec ((fisneg (lambda (n) (<. n 0.0)))) (letrec ((fiszero (lambda (n) (=. n 0.0)))) (letrec ((floor (lambda (n) (if (=. (/. n (itof (ftoi n))) 1.0) n (let ((flag (copysign n))) (let ((abs-n (*. n flag))) (if (<. flag 0.0) (itof (- 0 (ftoi (+. abs-n 0.5)))) (if (<. abs-n 0.5) 0.0 (itof (ftoi (-. abs-n 0.5))))))))))) (letrec ((fhalf (lambda (n) (*. n 0.5)))) (letrec ((fsqr (lambda (n) (*. n n)))) (letrec ((fabs (lambda (n) (if (<. n 0.0) (-. 0.0 n) n)))) (letrec ((fneg (lambda (n) (-. 0.0 n)))) (letrec ((sqrt (lambda (a) (letrec ((sqrtinv (lambda (a) (letrec ((init-a (lambda (a x) (if (<. (*. x x) a) (init-a a (+. x 1.0)) (/. 1.0 x))))) (letrec ((sqrtinv-iter (lambda (a x g) (let ((h (-. 1.0 (*. a (*. x x))))) (if (>=. (fabs h) (fabs g)) x (sqrtinv-iter a (+. x (*. x (*. h (/. (+. 8.0 (*. h (+. 6.0 (*. 5.0 h)))) 16.0)))) h)))))) (sqrtinv-iter a (init-a a 1.0) 1.0)))))) (if (=. a 0.0) 0.0 (*. a (sqrtinv a))))))) (letrec ((reduction-2pi (lambda (x) (letrec ((loop1 (lambda (x p) (if (<. x p) p (loop1 x (*. 2.0 p)))))) (letrec ((loop2 (lambda (x p) (if (<. x (*. 2.0 pi)) x (if (<. x p) (loop2 x (/. p 2.0)) (loop2 (-. x p) (/. p 2.0))))))) (let ((p (loop1 x (*. 2 pi)))) (loop2 x p))))))) (letrec ((kernel-sin (lambda (x) (let ((s1 -0.16666666666666616) (s2 0.008333333333320002) (s3 -1.984126982840213e-4) (s4 2.7557313299015054e-6) (s5 -2.5050705846378875e-8) (s6 1.5894136371952154e-10) (u (*. x x))) (+. (*. x (*. u (+. s1 (*. u (+. s2 (*. u (+. s3 (*. u (+. s4 (*. u (+. s5 (*. u s6)))))))))))) x))))) (letrec ((kernel-cos (lambda (x) (let ((c1 -0.5) (c2 0.04166666666666645) (c3 -0.0013888888888861108) (c4 2.4801587283886827e-5) (c5 -2.75573130991395e-7) (c6 2.087558253975872e-9) (c7 -1.1353387007200546e-11) (u (*. x x))) (+. (*. u (+. c1 (*. u (+. c2 (*. u (+. c3 (*. u (+. c4 (*. u (+. c5 (*. u (+. c6 (*. u c7))))))))))))) 1.0))))) (letrec ((sin (lambda (x) (let ((flag1 (copysign x)) (abs-x (fabs x))) (let ((x1 (reduction-2pi abs-x))) (let ((x2 (if (<. x1 pi) x1 (-. x1 pi))) (flag2 (if (<. x1 pi) flag1 (-. 0.0 flag1)))) (let ((x3 (if (<. x2 pio2) x2 (-. pi x2)))) (if (>. x3 pio4) (*. flag2 (kernel-cos (-. pio2 x3))) (*. flag2 (kernel-sin x3)))))))))) (letrec ((cos (lambda (x) (let ((flag1 1.0) (abs-x (fabs x))) (let ((x1 (reduction-2pi abs-x))) (let ((x2 (if (<. x1 pi) x1 (-. x1 pi))) (flag2 (if (<. x1 pi) flag1 (-. 0.0 flag1)))) (let ((x3 (if (<. x2 pio2) x2 (-. pi x2))) (flag3 (if (<. x2 pio2) flag2 (-. 0.0 flag2)))) (if (>. x3 pio4) (*. flag3 (kernel-sin (-. pio2 x3))) (*. flag3 (kernel-cos x3)))))))))) (letrec ((kernel-atan (lambda (x) (let ((a1 -0.3333333) (a2 0.2) (a3 -0.142857142) (a4 0.111111104) (a5 -0.08976446) (a6 0.060035485) (u (*. x x))) (+. (*. x (*. u (+. a1 (*. u (+. a2 (*. u (+. a3 (*. u (+. a4 (*. u (+. a5 (*. u a6)))))))))))) x))))) (letrec ((atan (lambda (x) (let ((flag (copysign x)) (abs-x (fabs x))) (if (<. abs-x 0.4375) (*. flag (kernel-atan abs-x)) (if (<. abs-x 2.4375) (*. flag (+. pio4 (kernel-atan (/. (-. abs-x 1.0) (+. abs-x 1.0))))) (*. flag (-. pio2 (kernel-atan (/. 1.0 abs-x)))))))))) (letrec ((int_of_float (lambda (n) (let ((flag (copysign n))) (let ((abs-n (*. flag n))) (if (<. abs-n 0.5) 0 (if (<. flag 0.0) (- 0 (ftoi (-. abs-n 0.5))) (ftoi (-. abs-n 0.5))))))))) (letrec ((float_of_int (lambda (n) (itof n)))) (letrec ((create_array (lambda (n x) (make-vector n x)))) (letrec ((print_char (lambda (n) (write-byte n)))) (letrec ((print_int (lambda (n) (letrec ((print_int-iter (lambda (n) (let ((q (/ n 10)) (r (modulo n 10))) (if (= q 0) (let ((b (+ n 48))) (write-byte b)) (let ((dummy (print_int-iter q))) (write-byte (+ r 48)))))))) (if (< n 0) (let ((dummy (write-byte 45))) (print_int-iter (- 0 n))) (print_int-iter n)))))) (letrec ((read-word (lambda () (let ((r3 (read-byte)) (r2 (read-byte)) (r1 (read-byte)) (r0 (read-byte))) (let ((b3 (sll r3 24)) (b2 (sll r2 16)) (b1 (sll r1 8)) (b0 r0)) (logor b3 (logor b2 (logor b1 b0)))))))) (letrec ((read_float (lambda (ignore) (read-word)))) (letrec ((read_int (lambda (ignore) (read-word)))) (letrec ((sgn (lambda (x) (if (fiszero x) 0.0 (if (fispos x) 1.0 -1.0))))) (letrec ((fneg_cond (lambda (cond x) (if cond x (fneg x))))) (letrec ((add_mod5 (lambda (x y) (let ((sum (+ x y))) (if (>= sum 5) (- sum 5) sum))))) (letrec ((vecset (lambda (v x y z) (let ((Tu2 (vector-set! v 0 x))) (let ((Tu1 (vector-set! v 1 y))) (vector-set! v 2 z)))))) (letrec ((vecfill (lambda (v elem) (let ((Tu4 (vector-set! v 0 elem))) (let ((Tu3 (vector-set! v 1 elem))) (vector-set! v 2 elem)))))) (letrec ((vecbzero (lambda (v) (vecfill v 0.0)))) (letrec ((veccpy (lambda (dest src) (let ((Tu6 (vector-set! dest 0 (vector-ref src 0)))) (let ((Tu5 (vector-set! dest 1 (vector-ref src 1)))) (vector-set! dest 2 (vector-ref src 2))))))) (letrec ((vecdist2 (lambda (p q) (+. (+. (fsqr (-. (vector-ref p 0) (vector-ref q 0))) (fsqr (-. (vector-ref p 1) (vector-ref q 1)))) (fsqr (-. (vector-ref p 2) (vector-ref q 2))))))) (letrec ((vecunit (lambda (v) (let ((il (/. 1.0 (sqrt (+. (+. (fsqr (vector-ref v 0)) (fsqr (vector-ref v 1))) (fsqr (vector-ref v 2))))))) (let ((Tu8 (vector-set! v 0 (*. (vector-ref v 0) il)))) (let ((Tu7 (vector-set! v 1 (*. (vector-ref v 1) il)))) (vector-set! v 2 (*. (vector-ref v 2) il)))))))) (letrec ((vecunit_sgn (lambda (v inv) (let ((l (sqrt (+. (+. (fsqr (vector-ref v 0)) (fsqr (vector-ref v 1))) (fsqr (vector-ref v 2)))))) (let ((il (if (fiszero l) 1.0 (if inv (/. -1.0 l) (/. 1.0 l))))) (let ((Tu10 (vector-set! v 0 (*. (vector-ref v 0) il)))) (let ((Tu9 (vector-set! v 1 (*. (vector-ref v 1) il)))) (vector-set! v 2 (*. (vector-ref v 2) il))))))))) (letrec ((veciprod (lambda (v w) (+. (+. (*. (vector-ref v 0) (vector-ref w 0)) (*. (vector-ref v 1) (vector-ref w 1))) (*. (vector-ref v 2) (vector-ref w 2)))))) (letrec ((veciprod2 (lambda (v w0 w1 w2) (+. (+. (*. (vector-ref v 0) w0) (*. (vector-ref v 1) w1)) (*. (vector-ref v 2) w2))))) (letrec ((vecaccum (lambda (dest scale v) (let ((Tu12 (vector-set! dest 0 (+. (vector-ref dest 0) (*. scale (vector-ref v 0)))))) (let ((Tu11 (vector-set! dest 1 (+. (vector-ref dest 1) (*. scale (vector-ref v 1)))))) (vector-set! dest 2 (+. (vector-ref dest 2) (*. scale (vector-ref v 2))))))))) (letrec ((vecadd (lambda (dest v) (let ((Tu14 (vector-set! dest 0 (+. (vector-ref dest 0) (vector-ref v 0))))) (let ((Tu13 (vector-set! dest 1 (+. (vector-ref dest 1) (vector-ref v 1))))) (vector-set! dest 2 (+. (vector-ref dest 2) (vector-ref v 2)))))))) (letrec ((vecmul (lambda (dest v) (let ((Tu16 (vector-set! dest 0 (*. (vector-ref dest 0) (vector-ref v 0))))) (let ((Tu15 (vector-set! dest 1 (*. (vector-ref dest 1) (vector-ref v 1))))) (vector-set! dest 2 (*. (vector-ref dest 2) (vector-ref v 2)))))))) (letrec ((vecscale (lambda (dest scale) (let ((Tu18 (vector-set! dest 0 (*. (vector-ref dest 0) scale)))) (let ((Tu17 (vector-set! dest 1 (*. (vector-ref dest 1) scale)))) (vector-set! dest 2 (*. (vector-ref dest 2) scale))))))) (letrec ((vecaccumv (lambda (dest v w) (let ((Tu20 (vector-set! dest 0 (+. (vector-ref dest 0) (*. (vector-ref v 0) (vector-ref w 0)))))) (let ((Tu19 (vector-set! dest 1 (+. (vector-ref dest 1) (*. (vector-ref v 1) (vector-ref w 1)))))) (vector-set! dest 2 (+. (vector-ref dest 2) (*. (vector-ref v 2) (vector-ref w 2))))))))) (letrec ((o_texturetype (lambda (m) (let ((m_tex (vector-ref m 0)) (xm_shape (vector-ref m 1)) (xm_surface (vector-ref m 2)) (xm_isrot (vector-ref m 3)) (xm_abc (vector-ref m 4)) (xm_xyz (vector-ref m 5)) (xm_invert (vector-ref m 6)) (xm_surfparams (vector-ref m 7)) (xm_color (vector-ref m 8)) (xm_rot123 (vector-ref m 9)) (xm_ctbl (vector-ref m 10))) m_tex)))) (letrec ((o_form (lambda (m) (let ((xm_tex (vector-ref m 0)) (m_shape (vector-ref m 1)) (xm_surface (vector-ref m 2)) (xm_isrot (vector-ref m 3)) (xm_abc (vector-ref m 4)) (xm_xyz (vector-ref m 5)) (xm_invert (vector-ref m 6)) (xm_surfparams (vector-ref m 7)) (xm_color (vector-ref m 8)) (xm_rot123 (vector-ref m 9)) (xm_ctbl (vector-ref m 10))) m_shape)))) (letrec ((o_reflectiontype (lambda (m) (let ((xm_tex (vector-ref m 0)) (xm_shape (vector-ref m 1)) (m_surface (vector-ref m 2)) (xm_isrot (vector-ref m 3)) (xm_abc (vector-ref m 4)) (xm_xyz (vector-ref m 5)) (xm_invert (vector-ref m 6)) (xm_surfparams (vector-ref m 7)) (xm_color (vector-ref m 8)) (xm_rot123 (vector-ref m 9)) (xm_ctbl (vector-ref m 10))) m_surface)))) (letrec ((o_isinvert (lambda (m) (let ((xm_tex (vector-ref m 0)) (xm_shape (vector-ref m 1)) (xm_surface (vector-ref m 2)) (xm_isrot (vector-ref m 3)) (xm_abc (vector-ref m 4)) (xm_xyz (vector-ref m 5)) (m_invert (vector-ref m 6)) (xm_surfparams (vector-ref m 7)) (xm_color (vector-ref m 8)) (xm_rot123 (vector-ref m 9)) (xm_ctbl (vector-ref m 10))) m_invert)))) (letrec ((o_isrot (lambda (m) (let ((xm_tex (vector-ref m 0)) (xm_shape (vector-ref m 1)) (xm_surface (vector-ref m 2)) (m_isrot (vector-ref m 3)) (xm_abc (vector-ref m 4)) (xm_xyz (vector-ref m 5)) (xm_invert (vector-ref m 6)) (xm_surfparams (vector-ref m 7)) (xm_color (vector-ref m 8)) (xm_rot123 (vector-ref m 9)) (xm_ctbl (vector-ref m 10))) m_isrot)))) (letrec ((o_param_a (lambda (m) (let ((xm_tex (vector-ref m 0)) (xm_shape (vector-ref m 1)) (xm_surface (vector-ref m 2)) (xm_isrot (vector-ref m 3)) (m_abc (vector-ref m 4)) (xm_xyz (vector-ref m 5)) (xm_invert (vector-ref m 6)) (xm_surfparams (vector-ref m 7)) (xm_color (vector-ref m 8)) (xm_rot123 (vector-ref m 9)) (xm_ctbl (vector-ref m 10))) (vector-ref m_abc 0))))) (letrec ((o_param_b (lambda (m) (let ((xm_tex (vector-ref m 0)) (xm_shape (vector-ref m 1)) (xm_surface (vector-ref m 2)) (xm_isrot (vector-ref m 3)) (m_abc (vector-ref m 4)) (xm_xyz (vector-ref m 5)) (xm_invert (vector-ref m 6)) (xm_surfparams (vector-ref m 7)) (xm_color (vector-ref m 8)) (xm_rot123 (vector-ref m 9)) (xm_ctbl (vector-ref m 10))) (vector-ref m_abc 1))))) (letrec ((o_param_c (lambda (m) (let ((xm_tex (vector-ref m 0)) (xm_shape (vector-ref m 1)) (xm_surface (vector-ref m 2)) (xm_isrot (vector-ref m 3)) (m_abc (vector-ref m 4)) (xm_xyz (vector-ref m 5)) (xm_invert (vector-ref m 6)) (xm_surfparams (vector-ref m 7)) (xm_color (vector-ref m 8)) (xm_rot123 (vector-ref m 9)) (xm_ctbl (vector-ref m 10))) (vector-ref m_abc 2))))) (letrec ((o_param_abc (lambda (m) (let ((xm_tex (vector-ref m 0)) (xm_shape (vector-ref m 1)) (xm_surface (vector-ref m 2)) (xm_isrot (vector-ref m 3)) (m_abc (vector-ref m 4)) (xm_xyz (vector-ref m 5)) (xm_invert (vector-ref m 6)) (xm_surfparams (vector-ref m 7)) (xm_color (vector-ref m 8)) (xm_rot123 (vector-ref m 9)) (xm_ctbl (vector-ref m 10))) m_abc)))) (letrec ((o_param_x (lambda (m) (let ((xm_tex (vector-ref m 0)) (xm_shape (vector-ref m 1)) (xm_surface (vector-ref m 2)) (xm_isrot (vector-ref m 3)) (xm_abc (vector-ref m 4)) (m_xyz (vector-ref m 5)) (xm_invert (vector-ref m 6)) (xm_surfparams (vector-ref m 7)) (xm_color (vector-ref m 8)) (xm_rot123 (vector-ref m 9)) (xm_ctbl (vector-ref m 10))) (vector-ref m_xyz 0))))) (letrec ((o_param_y (lambda (m) (let ((xm_tex (vector-ref m 0)) (xm_shape (vector-ref m 1)) (xm_surface (vector-ref m 2)) (xm_isrot (vector-ref m 3)) (xm_abc (vector-ref m 4)) (m_xyz (vector-ref m 5)) (xm_invert (vector-ref m 6)) (xm_surfparams (vector-ref m 7)) (xm_color (vector-ref m 8)) (xm_rot123 (vector-ref m 9)) (xm_ctbl (vector-ref m 10))) (vector-ref m_xyz 1))))) (letrec ((o_param_z (lambda (m) (let ((xm_tex (vector-ref m 0)) (xm_shape (vector-ref m 1)) (xm_surface (vector-ref m 2)) (xm_isrot (vector-ref m 3)) (xm_abc (vector-ref m 4)) (m_xyz (vector-ref m 5)) (xm_invert (vector-ref m 6)) (xm_surfparams (vector-ref m 7)) (xm_color (vector-ref m 8)) (xm_rot123 (vector-ref m 9)) (xm_ctbl (vector-ref m 10))) (vector-ref m_xyz 2))))) (letrec ((o_diffuse (lambda (m) (let ((xm_tex (vector-ref m 0)) (xm_shape (vector-ref m 1)) (xm_surface (vector-ref m 2)) (xm_isrot (vector-ref m 3)) (xm_abc (vector-ref m 4)) (xm_xyz (vector-ref m 5)) (xm_invert (vector-ref m 6)) (m_surfparams (vector-ref m 7)) (xm_color (vector-ref m 8)) (xm_rot123 (vector-ref m 9)) (xm_ctbl (vector-ref m 10))) (vector-ref m_surfparams 0))))) (letrec ((o_hilight (lambda (m) (let ((xm_tex (vector-ref m 0)) (xm_shape (vector-ref m 1)) (xm_surface (vector-ref m 2)) (xm_isrot (vector-ref m 3)) (xm_abc (vector-ref m 4)) (xm_xyz (vector-ref m 5)) (xm_invert (vector-ref m 6)) (m_surfparams (vector-ref m 7)) (xm_color (vector-ref m 8)) (xm_rot123 (vector-ref m 9)) (xm_ctbl (vector-ref m 10))) (vector-ref m_surfparams 1))))) (letrec ((o_color_red (lambda (m) (let ((xm_tex (vector-ref m 0)) (xm_shape (vector-ref m 1)) (m_surface (vector-ref m 2)) (xm_isrot (vector-ref m 3)) (xm_abc (vector-ref m 4)) (xm_xyz (vector-ref m 5)) (xm_invert (vector-ref m 6)) (xm_surfparams (vector-ref m 7)) (m_color (vector-ref m 8)) (xm_rot123 (vector-ref m 9)) (xm_ctbl (vector-ref m 10))) (vector-ref m_color 0))))) (letrec ((o_color_green (lambda (m) (let ((xm_tex (vector-ref m 0)) (xm_shape (vector-ref m 1)) (m_surface (vector-ref m 2)) (xm_isrot (vector-ref m 3)) (xm_abc (vector-ref m 4)) (xm_xyz (vector-ref m 5)) (xm_invert (vector-ref m 6)) (xm_surfparams (vector-ref m 7)) (m_color (vector-ref m 8)) (xm_rot123 (vector-ref m 9)) (xm_ctbl (vector-ref m 10))) (vector-ref m_color 1))))) (letrec ((o_color_blue (lambda (m) (let ((xm_tex (vector-ref m 0)) (xm_shape (vector-ref m 1)) (m_surface (vector-ref m 2)) (xm_isrot (vector-ref m 3)) (xm_abc (vector-ref m 4)) (xm_xyz (vector-ref m 5)) (xm_invert (vector-ref m 6)) (xm_surfparams (vector-ref m 7)) (m_color (vector-ref m 8)) (xm_rot123 (vector-ref m 9)) (xm_ctbl (vector-ref m 10))) (vector-ref m_color 2))))) (letrec ((o_param_r1 (lambda (m) (let ((xm_tex (vector-ref m 0)) (xm_shape (vector-ref m 1)) (xm_surface (vector-ref m 2)) (xm_isrot (vector-ref m 3)) (xm_abc (vector-ref m 4)) (xm_xyz (vector-ref m 5)) (xm_invert (vector-ref m 6)) (xm_surfparams (vector-ref m 7)) (xm_color (vector-ref m 8)) (m_rot123 (vector-ref m 9)) (xm_ctbl (vector-ref m 10))) (vector-ref m_rot123 0))))) (letrec ((o_param_r2 (lambda (m) (let ((xm_tex (vector-ref m 0)) (xm_shape (vector-ref m 1)) (xm_surface (vector-ref m 2)) (xm_isrot (vector-ref m 3)) (xm_abc (vector-ref m 4)) (xm_xyz (vector-ref m 5)) (xm_invert (vector-ref m 6)) (xm_surfparams (vector-ref m 7)) (xm_color (vector-ref m 8)) (m_rot123 (vector-ref m 9)) (xm_ctbl (vector-ref m 10))) (vector-ref m_rot123 1))))) (letrec ((o_param_r3 (lambda (m) (let ((xm_tex (vector-ref m 0)) (xm_shape (vector-ref m 1)) (xm_surface (vector-ref m 2)) (xm_isrot (vector-ref m 3)) (xm_abc (vector-ref m 4)) (xm_xyz (vector-ref m 5)) (xm_invert (vector-ref m 6)) (xm_surfparams (vector-ref m 7)) (xm_color (vector-ref m 8)) (m_rot123 (vector-ref m 9)) (xm_ctbl (vector-ref m 10))) (vector-ref m_rot123 2))))) (letrec ((o_param_ctbl (lambda (m) (let ((xm_tex (vector-ref m 0)) (xm_shape (vector-ref m 1)) (xm_surface (vector-ref m 2)) (xm_isrot (vector-ref m 3)) (xm_abc (vector-ref m 4)) (xm_xyz (vector-ref m 5)) (xm_invert (vector-ref m 6)) (xm_surfparams (vector-ref m 7)) (xm_color (vector-ref m 8)) (xm_rot123 (vector-ref m 9)) (m_ctbl (vector-ref m 10))) m_ctbl)))) (letrec ((p_rgb (lambda (pixel) (let ((m_rgb (vector-ref pixel 0)) (xm_isect_ps (vector-ref pixel 1)) (xm_sids (vector-ref pixel 2)) (xm_cdif (vector-ref pixel 3)) (xm_engy (vector-ref pixel 4)) (xm_r20p (vector-ref pixel 5)) (xm_gid (vector-ref pixel 6)) (xm_nvectors (vector-ref pixel 7))) m_rgb)))) (letrec ((p_intersection_points (lambda (pixel) (let ((xm_rgb (vector-ref pixel 0)) (m_isect_ps (vector-ref pixel 1)) (xm_sids (vector-ref pixel 2)) (xm_cdif (vector-ref pixel 3)) (xm_engy (vector-ref pixel 4)) (xm_r20p (vector-ref pixel 5)) (xm_gid (vector-ref pixel 6)) (xm_nvectors (vector-ref pixel 7))) m_isect_ps)))) (letrec ((p_surface_ids (lambda (pixel) (let ((xm_rgb (vector-ref pixel 0)) (xm_isect_ps (vector-ref pixel 1)) (m_sids (vector-ref pixel 2)) (xm_cdif (vector-ref pixel 3)) (xm_engy (vector-ref pixel 4)) (xm_r20p (vector-ref pixel 5)) (xm_gid (vector-ref pixel 6)) (xm_nvectors (vector-ref pixel 7))) m_sids)))) (letrec ((p_calc_diffuse (lambda (pixel) (let ((xm_rgb (vector-ref pixel 0)) (xm_isect_ps (vector-ref pixel 1)) (xm_sids (vector-ref pixel 2)) (m_cdif (vector-ref pixel 3)) (xm_engy (vector-ref pixel 4)) (xm_r20p (vector-ref pixel 5)) (xm_gid (vector-ref pixel 6)) (xm_nvectors (vector-ref pixel 7))) m_cdif)))) (letrec ((p_energy (lambda (pixel) (let ((xm_rgb (vector-ref pixel 0)) (xm_isect_ps (vector-ref pixel 1)) (xm_sids (vector-ref pixel 2)) (xm_cdif (vector-ref pixel 3)) (m_engy (vector-ref pixel 4)) (xm_r20p (vector-ref pixel 5)) (xm_gid (vector-ref pixel 6)) (xm_nvectors (vector-ref pixel 7))) m_engy)))) (letrec ((p_received_ray_20percent (lambda (pixel) (let ((xm_rgb (vector-ref pixel 0)) (xm_isect_ps (vector-ref pixel 1)) (xm_sids (vector-ref pixel 2)) (xm_cdif (vector-ref pixel 3)) (xm_engy (vector-ref pixel 4)) (m_r20p (vector-ref pixel 5)) (xm_gid (vector-ref pixel 6)) (xm_nvectors (vector-ref pixel 7))) m_r20p)))) (letrec ((p_group_id (lambda (pixel) (let ((xm_rgb (vector-ref pixel 0)) (xm_isect_ps (vector-ref pixel 1)) (xm_sids (vector-ref pixel 2)) (xm_cdif (vector-ref pixel 3)) (xm_engy (vector-ref pixel 4)) (xm_r20p (vector-ref pixel 5)) (m_gid (vector-ref pixel 6)) (xm_nvectors (vector-ref pixel 7))) (vector-ref m_gid 0))))) (letrec ((p_set_group_id (lambda (pixel id) (let ((xm_rgb (vector-ref pixel 0)) (xm_isect_ps (vector-ref pixel 1)) (xm_sids (vector-ref pixel 2)) (xm_cdif (vector-ref pixel 3)) (xm_engy (vector-ref pixel 4)) (xm_r20p (vector-ref pixel 5)) (m_gid (vector-ref pixel 6)) (xm_nvectors (vector-ref pixel 7))) (vector-set! m_gid 0 id))))) (letrec ((p_nvectors (lambda (pixel) (let ((xm_rgb (vector-ref pixel 0)) (xm_isect_ps (vector-ref pixel 1)) (xm_sids (vector-ref pixel 2)) (xm_cdif (vector-ref pixel 3)) (xm_engy (vector-ref pixel 4)) (xm_r20p (vector-ref pixel 5)) (xm_gid (vector-ref pixel 6)) (m_nvectors (vector-ref pixel 7))) m_nvectors)))) (letrec ((d_vec (lambda (d) (let ((m_vec (vector-ref d 0)) (xm_const (vector-ref d 1))) m_vec)))) (letrec ((d_const (lambda (d) (let ((dm_vec (vector-ref d 0)) (m_const (vector-ref d 1))) m_const)))) (letrec ((r_surface_id (lambda (r) (let ((m_sid (vector-ref r 0)) (xm_dvec (vector-ref r 1)) (xm_br (vector-ref r 2))) m_sid)))) (letrec ((r_dvec (lambda (r) (let ((xm_sid (vector-ref r 0)) (m_dvec (vector-ref r 1)) (xm_br (vector-ref r 2))) m_dvec)))) (letrec ((r_bright (lambda (r) (let ((xm_sid (vector-ref r 0)) (xm_dvec (vector-ref r 1)) (m_br (vector-ref r 2))) m_br)))) (letrec ((rad (lambda (x) (*. x 0.017453)))) (letrec ((read_screen_settings (lambda (Tu21) (let ((Tu35 (vector-set! screen 0 (read_float 0)))) (let ((Tu34 (vector-set! screen 1 (read_float 0)))) (let ((Tu33 (vector-set! screen 2 (read_float 0)))) (let ((v1 (rad (read_float 0)))) (let ((cos_v1 (cos v1))) (let ((sin_v1 (sin v1))) (let ((v2 (rad (read_float 0)))) (let ((cos_v2 (cos v2))) (let ((sin_v2 (sin v2))) (let ((Tu32 (vector-set! screenz_dir 0 (*. (*. cos_v1 sin_v2) 200.0)))) (let ((Tu31 (vector-set! screenz_dir 1 (*. sin_v1 -200.0)))) (let ((Tu30 (vector-set! screenz_dir 2 (*. (*. cos_v1 cos_v2) 200.0)))) (let ((Tu29 (vector-set! screenx_dir 0 cos_v2))) (let ((Tu28 (vector-set! screenx_dir 1 0.0))) (let ((Tu27 (vector-set! screenx_dir 2 (fneg sin_v2)))) (let ((Tu26 (vector-set! screeny_dir 0 (*. (fneg sin_v1) sin_v2)))) (let ((Tu25 (vector-set! screeny_dir 1 (fneg cos_v1)))) (let ((Tu24 (vector-set! screeny_dir 2 (*. (fneg sin_v1) cos_v2)))) (let ((Tu23 (vector-set! viewpoint 0 (-. (vector-ref screen 0) (vector-ref screenz_dir 0))))) (let ((Tu22 (vector-set! viewpoint 1 (-. (vector-ref screen 1) (vector-ref screenz_dir 1))))) (vector-set! viewpoint 2 (-. (vector-ref screen 2) (vector-ref screenz_dir 2)))))))))))))))))))))))))) (letrec ((read_light (lambda (Tu36) (let ((nl (read_int 0))) (let ((l1 (rad (read_float 0)))) (let ((sl1 (sin l1))) (let ((Tu39 (vector-set! light 1 (fneg sl1)))) (let ((l2 (rad (read_float 0)))) (let ((cl1 (cos l1))) (let ((sl2 (sin l2))) (let ((Tu38 (vector-set! light 0 (*. cl1 sl2)))) (let ((cl2 (cos l2))) (let ((Tu37 (vector-set! light 2 (*. cl1 cl2)))) (vector-set! beam 0 (read_float 0))))))))))))))) (letrec ((rotate_quadratic_matrix (lambda (abc rot) (let ((cos_x (cos (vector-ref rot 0)))) (let ((sin_x (sin (vector-ref rot 0)))) (let ((cos_y (cos (vector-ref rot 1)))) (let ((sin_y (sin (vector-ref rot 1)))) (let ((cos_z (cos (vector-ref rot 2)))) (let ((sin_z (sin (vector-ref rot 2)))) (let ((m00 (*. cos_y cos_z))) (let ((m01 (-. (*. (*. sin_x sin_y) cos_z) (*. cos_x sin_z)))) (let ((m02 (+. (*. (*. cos_x sin_y) cos_z) (*. sin_x sin_z)))) (let ((m10 (*. cos_y sin_z))) (let ((m11 (+. (*. (*. sin_x sin_y) sin_z) (*. cos_x cos_z)))) (let ((m12 (-. (*. (*. cos_x sin_y) sin_z) (*. sin_x cos_z)))) (let ((m20 (fneg sin_y))) (let ((m21 (*. sin_x cos_y))) (let ((m22 (*. cos_x cos_y))) (let ((ao (vector-ref abc 0))) (let ((bo (vector-ref abc 1))) (let ((co (vector-ref abc 2))) (let ((Tu44 (vector-set! abc 0 (+. (+. (*. ao (fsqr m00)) (*. bo (fsqr m10))) (*. co (fsqr m20)))))) (let ((Tu43 (vector-set! abc 1 (+. (+. (*. ao (fsqr m01)) (*. bo (fsqr m11))) (*. co (fsqr m21)))))) (let ((Tu42 (vector-set! abc 2 (+. (+. (*. ao (fsqr m02)) (*. bo (fsqr m12))) (*. co (fsqr m22)))))) (let ((Tu41 (vector-set! rot 0 (*. 2.0 (+. (+. (*. (*. ao m01) m02) (*. (*. bo m11) m12)) (*. (*. co m21) m22)))))) (let ((Tu40 (vector-set! rot 1 (*. 2.0 (+. (+. (*. (*. ao m00) m02) (*. (*. bo m10) m12)) (*. (*. co m20) m22)))))) (vector-set! rot 2 (*. 2.0 (+. (+. (*. (*. ao m00) m01) (*. (*. bo m10) m11)) (*. (*. co m20) m21)))))))))))))))))))))))))))))) (letrec ((read_nth_object (lambda (n) (let ((texture (read_int 0))) (if (not (= texture -1)) (let ((form (read_int 0))) (let ((refltype (read_int 0))) (let ((isrot_p (read_int 0))) (let ((abc (create_array 3 0.0))) (let ((Tu63 (vector-set! abc 0 (read_float 0)))) (let ((Tu62 (vector-set! abc 1 (read_float 0)))) (let ((Tu61 (vector-set! abc 2 (read_float 0)))) (let ((xyz (create_array 3 0.0))) (let ((Tu60 (vector-set! xyz 0 (read_float 0)))) (let ((Tu59 (vector-set! xyz 1 (read_float 0)))) (let ((Tu58 (vector-set! xyz 2 (read_float 0)))) (let ((m_invert (fisneg (read_float 0)))) (let ((reflparam (create_array 2 0.0))) (let ((Tu57 (vector-set! reflparam 0 (read_float 0)))) (let ((Tu56 (vector-set! reflparam 1 (read_float 0)))) (let ((color (create_array 3 0.0))) (let ((Tu55 (vector-set! color 0 (read_float 0)))) (let ((Tu54 (vector-set! color 1 (read_float 0)))) (let ((Tu53 (vector-set! color 2 (read_float 0)))) (let ((rotation (create_array 3 0.0))) (let ((Tu52 (if (not (= isrot_p 0)) (let ((Tu46 (vector-set! rotation 0 (rad (read_float 0))))) (let ((Tu45 (vector-set! rotation 1 (rad (read_float 0))))) (vector-set! rotation 2 (rad (read_float 0))))) 0))) (let ((m_invert2 (if (= form 2) #t m_invert))) (let ((ctbl (create_array 4 0.0))) (let ((obj (vector texture form refltype isrot_p abc xyz m_invert2 reflparam color rotation ctbl))) (let ((Tu51 (vector-set! objects n obj))) (let ((Tu50 (if (= form 3) (let ((a (vector-ref abc 0))) (let ((Tu48 (vector-set! abc 0 (if (fiszero a) 0.0 (/. (sgn a) (fsqr a)))))) (let ((b (vector-ref abc 1))) (let ((Tu47 (vector-set! abc 1 (if (fiszero b) 0.0 (/. (sgn b) (fsqr b)))))) (let ((c (vector-ref abc 2))) (vector-set! abc 2 (if (fiszero c) 0.0 (/. (sgn c) (fsqr c))))))))) (if (= form 2) (vecunit_sgn abc (not m_invert)) 0)))) (let ((Tu49 (if (not (= isrot_p 0)) (rotate_quadratic_matrix abc rotation) 0))) #t))))))))))))))))))))))))))) #f))))) (letrec ((read_object (lambda (n) (if (< n 60) (if (read_nth_object n) (read_object (+ n 1)) (vector-set! n_objects 0 n)) 0)))) (letrec ((read_all_object (lambda (Tu64) (read_object 0)))) (letrec ((read_net_item (lambda (length) (let ((item (read_int 0))) (if (= item -1) (create_array (+ length 1) -1) (let ((v (read_net_item (+ length 1)))) (let ((Tu65 (vector-set! v length item))) v))))))) (letrec ((read_or_network (lambda (length) (let ((net (read_net_item 0))) (if (= (vector-ref net 0) -1) (create_array (+ length 1) net) (let ((v (read_or_network (+ length 1)))) (let ((Tu66 (vector-set! v length net))) v))))))) (letrec ((read_and_network (lambda (n) (let ((net (read_net_item 0))) (if (= (vector-ref net 0) -1) 0 (let ((Tu67 (vector-set! and_net n net))) (read_and_network (+ n 1)))))))) (letrec ((read_parameter (lambda (Tu68) (let ((Tu72 (read_screen_settings 0))) (let ((Tu71 (read_light 0))) (let ((Tu70 (read_all_object 0))) (let ((Tu69 (read_and_network 0))) (vector-set! or_net 0 (read_or_network 0))))))))) (letrec ((solver_rect_surface (lambda (m dirvec b0 b1 b2 i0 i1 i2) (if (fiszero (vector-ref dirvec i0)) #f (let ((abc (o_param_abc m))) (let ((d (fneg_cond (xor (o_isinvert m) (fisneg (vector-ref dirvec i0))) (vector-ref abc i0)))) (let ((d2 (/. (-. d b0) (vector-ref dirvec i0)))) (if (fless (fabs (+. (*. d2 (vector-ref dirvec i1)) b1)) (vector-ref abc i1)) (if (fless (fabs (+. (*. d2 (vector-ref dirvec i2)) b2)) (vector-ref abc i2)) (let ((Tu73 (vector-set! solver_dist 0 d2))) #t) #f) #f)))))))) (letrec ((solver_rect (lambda (m dirvec b0 b1 b2) (if (solver_rect_surface m dirvec b0 b1 b2 0 1 2) 1 (if (solver_rect_surface m dirvec b1 b2 b0 1 2 0) 2 (if (solver_rect_surface m dirvec b2 b0 b1 2 0 1) 3 0)))))) (letrec ((solver_surface (lambda (m dirvec b0 b1 b2) (let ((abc (o_param_abc m))) (let ((d (veciprod dirvec abc))) (if (fispos d) (let ((Tu74 (vector-set! solver_dist 0 (/. (fneg (veciprod2 abc b0 b1 b2)) d)))) 1) 0)))))) (letrec ((quadratic (lambda (m v0 v1 v2) (let ((diag_part (+. (+. (*. (fsqr v0) (o_param_a m)) (*. (fsqr v1) (o_param_b m))) (*. (fsqr v2) (o_param_c m))))) (if (= (o_isrot m) 0) diag_part (+. (+. (+. diag_part (*. (*. v1 v2) (o_param_r1 m))) (*. (*. v2 v0) (o_param_r2 m))) (*. (*. v0 v1) (o_param_r3 m)))))))) (letrec ((bilinear (lambda (m v0 v1 v2 w0 w1 w2) (let ((diag_part (+. (+. (*. (*. v0 w0) (o_param_a m)) (*. (*. v1 w1) (o_param_b m))) (*. (*. v2 w2) (o_param_c m))))) (if (= (o_isrot m) 0) diag_part (+. diag_part (fhalf (+. (+. (*. (+. (*. v2 w1) (*. v1 w2)) (o_param_r1 m)) (*. (+. (*. v0 w2) (*. v2 w0)) (o_param_r2 m))) (*. (+. (*. v0 w1) (*. v1 w0)) (o_param_r3 m)))))))))) (letrec ((solver_second (lambda (m dirvec b0 b1 b2) (let ((aa (quadratic m (vector-ref dirvec 0) (vector-ref dirvec 1) (vector-ref dirvec 2)))) (if (fiszero aa) 0 (let ((bb (bilinear m (vector-ref dirvec 0) (vector-ref dirvec 1) (vector-ref dirvec 2) b0 b1 b2))) (let ((cc0 (quadratic m b0 b1 b2))) (let ((cc (if (= (o_form m) 3) (-. cc0 1.0) cc0))) (let ((d (-. (fsqr bb) (*. aa cc)))) (if (fispos d) (let ((sd (sqrt d))) (let ((t1 (if (o_isinvert m) sd (fneg sd)))) (let ((Tu75 (vector-set! solver_dist 0 (/. (-. t1 bb) aa)))) 1))) 0)))))))))) (letrec ((solver (lambda (index dirvec org) (let ((m (vector-ref objects index))) (let ((b0 (-. (vector-ref org 0) (o_param_x m)))) (let ((b1 (-. (vector-ref org 1) (o_param_y m)))) (let ((b2 (-. (vector-ref org 2) (o_param_z m)))) (let ((m_shape (o_form m))) (if (= m_shape 1) (solver_rect m dirvec b0 b1 b2) (if (= m_shape 2) (solver_surface m dirvec b0 b1 b2) (solver_second m dirvec b0 b1 b2))))))))))) (letrec ((solver_rect_fast (lambda (m v dconst b0 b1 b2) (let ((d0 (*. (-. (vector-ref dconst 0) b0) (vector-ref dconst 1)))) (if (if (fless (fabs (+. (*. d0 (vector-ref v 1)) b1)) (o_param_b m)) (if (fless (fabs (+. (*. d0 (vector-ref v 2)) b2)) (o_param_c m)) (not (fiszero (vector-ref dconst 1))) #f) #f) (let ((Tu76 (vector-set! solver_dist 0 d0))) 1) (let ((d1 (*. (-. (vector-ref dconst 2) b1) (vector-ref dconst 3)))) (if (if (fless (fabs (+. (*. d1 (vector-ref v 0)) b0)) (o_param_a m)) (if (fless (fabs (+. (*. d1 (vector-ref v 2)) b2)) (o_param_c m)) (not (fiszero (vector-ref dconst 3))) #f) #f) (let ((Tu77 (vector-set! solver_dist 0 d1))) 2) (let ((d2 (*. (-. (vector-ref dconst 4) b2) (vector-ref dconst 5)))) (if (if (fless (fabs (+. (*. d2 (vector-ref v 0)) b0)) (o_param_a m)) (if (fless (fabs (+. (*. d2 (vector-ref v 1)) b1)) (o_param_b m)) (not (fiszero (vector-ref dconst 5))) #f) #f) (let ((Tu78 (vector-set! solver_dist 0 d2))) 3) 0))))))))) (letrec ((solver_surface_fast (lambda (m dconst b0 b1 b2) (if (fisneg (vector-ref dconst 0)) (let ((Tu79 (vector-set! solver_dist 0 (+. (+. (*. (vector-ref dconst 1) b0) (*. (vector-ref dconst 2) b1)) (*. (vector-ref dconst 3) b2))))) 1) 0)))) (letrec ((solver_second_fast (lambda (m dconst b0 b1 b2) (let ((aa (vector-ref dconst 0))) (if (fiszero aa) 0 (let ((neg_bb (+. (+. (*. (vector-ref dconst 1) b0) (*. (vector-ref dconst 2) b1)) (*. (vector-ref dconst 3) b2)))) (let ((cc0 (quadratic m b0 b1 b2))) (let ((cc (if (= (o_form m) 3) (-. cc0 1.0) cc0))) (let ((d (-. (fsqr neg_bb) (*. aa cc)))) (if (fispos d) (let ((Tu80 (if (o_isinvert m) (vector-set! solver_dist 0 (*. (+. neg_bb (sqrt d)) (vector-ref dconst 4))) (vector-set! solver_dist 0 (*. (-. neg_bb (sqrt d)) (vector-ref dconst 4)))))) 1) 0)))))))))) (letrec ((solver_fast (lambda (index dirvec org) (let ((m (vector-ref objects index))) (let ((b0 (-. (vector-ref org 0) (o_param_x m)))) (let ((b1 (-. (vector-ref org 1) (o_param_y m)))) (let ((b2 (-. (vector-ref org 2) (o_param_z m)))) (let ((dconsts (d_const dirvec))) (let ((dconst (vector-ref dconsts index))) (let ((m_shape (o_form m))) (if (= m_shape 1) (solver_rect_fast m (d_vec dirvec) dconst b0 b1 b2) (if (= m_shape 2) (solver_surface_fast m dconst b0 b1 b2) (solver_second_fast m dconst b0 b1 b2))))))))))))) (letrec ((solver_surface_fast2 (lambda (m dconst sconst b0 b1 b2) (if (fisneg (vector-ref dconst 0)) (let ((Tu81 (vector-set! solver_dist 0 (*. (vector-ref dconst 0) (vector-ref sconst 3))))) 1) 0)))) (letrec ((solver_second_fast2 (lambda (m dconst sconst b0 b1 b2) (let ((aa (vector-ref dconst 0))) (if (fiszero aa) 0 (let ((neg_bb (+. (+. (*. (vector-ref dconst 1) b0) (*. (vector-ref dconst 2) b1)) (*. (vector-ref dconst 3) b2)))) (let ((cc (vector-ref sconst 3))) (let ((d (-. (fsqr neg_bb) (*. aa cc)))) (if (fispos d) (let ((Tu82 (if (o_isinvert m) (vector-set! solver_dist 0 (*. (+. neg_bb (sqrt d)) (vector-ref dconst 4))) (vector-set! solver_dist 0 (*. (-. neg_bb (sqrt d)) (vector-ref dconst 4)))))) 1) 0))))))))) (letrec ((solver_fast2 (lambda (index dirvec) (let ((m (vector-ref objects index))) (let ((sconst (o_param_ctbl m))) (let ((b0 (vector-ref sconst 0))) (let ((b1 (vector-ref sconst 1))) (let ((b2 (vector-ref sconst 2))) (let ((dconsts (d_const dirvec))) (let ((dconst (vector-ref dconsts index))) (let ((m_shape (o_form m))) (if (= m_shape 1) (solver_rect_fast m (d_vec dirvec) dconst b0 b1 b2) (if (= m_shape 2) (solver_surface_fast2 m dconst sconst b0 b1 b2) (solver_second_fast2 m dconst sconst b0 b1 b2)))))))))))))) (letrec ((setup_rect_table (lambda (vec m) (let ((const (create_array 6 0.0))) (let ((Tu88 (if (fiszero (vector-ref vec 0)) (vector-set! const 1 0.0) (let ((Tu83 (vector-set! const 0 (fneg_cond (xor (o_isinvert m) (fisneg (vector-ref vec 0))) (o_param_a m))))) (vector-set! const 1 (/. 1.0 (vector-ref vec 0))))))) (let ((Tu87 (if (fiszero (vector-ref vec 1)) (vector-set! const 3 0.0) (let ((Tu84 (vector-set! const 2 (fneg_cond (xor (o_isinvert m) (fisneg (vector-ref vec 1))) (o_param_b m))))) (vector-set! const 3 (/. 1.0 (vector-ref vec 1))))))) (let ((Tu86 (if (fiszero (vector-ref vec 2)) (vector-set! const 5 0.0) (let ((Tu85 (vector-set! const 4 (fneg_cond (xor (o_isinvert m) (fisneg (vector-ref vec 2))) (o_param_c m))))) (vector-set! const 5 (/. 1.0 (vector-ref vec 2))))))) const))))))) (letrec ((setup_surface_table (lambda (vec m) (let ((const (create_array 4 0.0))) (let ((d (+. (+. (*. (vector-ref vec 0) (o_param_a m)) (*. (vector-ref vec 1) (o_param_b m))) (*. (vector-ref vec 2) (o_param_c m))))) (let ((Tu92 (if (fispos d) (let ((Tu91 (vector-set! const 0 (/. -1.0 d)))) (let ((Tu90 (vector-set! const 1 (fneg (/. (o_param_a m) d))))) (let ((Tu89 (vector-set! const 2 (fneg (/. (o_param_b m) d))))) (vector-set! const 3 (fneg (/. (o_param_c m) d)))))) (vector-set! const 0 0.0)))) const)))))) (letrec ((setup_second_table (lambda (v m) (let ((const (create_array 5 0.0))) (let ((aa (quadratic m (vector-ref v 0) (vector-ref v 1) (vector-ref v 2)))) (let ((c1 (fneg (*. (vector-ref v 0) (o_param_a m))))) (let ((c2 (fneg (*. (vector-ref v 1) (o_param_b m))))) (let ((c3 (fneg (*. (vector-ref v 2) (o_param_c m))))) (let ((Tu99 (vector-set! const 0 aa))) (let ((Tu98 (if (not (= (o_isrot m) 0)) (let ((Tu94 (vector-set! const 1 (-. c1 (fhalf (+. (*. (vector-ref v 2) (o_param_r2 m)) (*. (vector-ref v 1) (o_param_r3 m)))))))) (let ((Tu93 (vector-set! const 2 (-. c2 (fhalf (+. (*. (vector-ref v 2) (o_param_r1 m)) (*. (vector-ref v 0) (o_param_r3 m)))))))) (vector-set! const 3 (-. c3 (fhalf (+. (*. (vector-ref v 1) (o_param_r1 m)) (*. (vector-ref v 0) (o_param_r2 m)))))))) (let ((Tu96 (vector-set! const 1 c1))) (let ((Tu95 (vector-set! const 2 c2))) (vector-set! const 3 c3)))))) (let ((Tu97 (if (not (fiszero aa)) (vector-set! const 4 (/. 1.0 aa)) 0))) const))))))))))) (letrec ((iter_setup_dirvec_constants (lambda (dirvec index) (if (>= index 0) (let ((m (vector-ref objects index))) (let ((dconst (d_const dirvec))) (let ((v (d_vec dirvec))) (let ((m_shape (o_form m))) (let ((Tu100 (if (= m_shape 1) (vector-set! dconst index (setup_rect_table v m)) (if (= m_shape 2) (vector-set! dconst index (setup_surface_table v m)) (vector-set! dconst index (setup_second_table v m)))))) (iter_setup_dirvec_constants dirvec (- index 1))))))) 0)))) (letrec ((setup_dirvec_constants (lambda (dirvec) (iter_setup_dirvec_constants dirvec (- (vector-ref n_objects 0) 1))))) (letrec ((setup_startp_constants (lambda (p index) (if (>= index 0) (let ((obj (vector-ref objects index))) (let ((sconst (o_param_ctbl obj))) (let ((m_shape (o_form obj))) (let ((Tu104 (vector-set! sconst 0 (-. (vector-ref p 0) (o_param_x obj))))) (let ((Tu103 (vector-set! sconst 1 (-. (vector-ref p 1) (o_param_y obj))))) (let ((Tu102 (vector-set! sconst 2 (-. (vector-ref p 2) (o_param_z obj))))) (let ((Tu101 (if (= m_shape 2) (vector-set! sconst 3 (veciprod2 (o_param_abc obj) (vector-ref sconst 0) (vector-ref sconst 1) (vector-ref sconst 2))) (if (> m_shape 2) (let ((cc0 (quadratic obj (vector-ref sconst 0) (vector-ref sconst 1) (vector-ref sconst 2)))) (vector-set! sconst 3 (if (= m_shape 3) (-. cc0 1.0) cc0))) 0)))) (setup_startp_constants p (- index 1))))))))) 0)))) (letrec ((setup_startp (lambda (p) (let ((Tu105 (veccpy startp_fast p))) (setup_startp_constants p (- (vector-ref n_objects 0) 1)))))) (letrec ((is_rect_outside (lambda (m p0 p1 p2) (if (if (fless (fabs p0) (o_param_a m)) (if (fless (fabs p1) (o_param_b m)) (fless (fabs p2) (o_param_c m)) #f) #f) (o_isinvert m) (not (o_isinvert m)))))) (letrec ((is_plane_outside (lambda (m p0 p1 p2) (let ((w (veciprod2 (o_param_abc m) p0 p1 p2))) (not (xor (o_isinvert m) (fisneg w))))))) (letrec ((is_second_outside (lambda (m p0 p1 p2) (let ((w (quadratic m p0 p1 p2))) (let ((w2 (if (= (o_form m) 3) (-. w 1.0) w))) (not (xor (o_isinvert m) (fisneg w2)))))))) (letrec ((is_outside (lambda (m q0 q1 q2) (let ((p0 (-. q0 (o_param_x m)))) (let ((p1 (-. q1 (o_param_y m)))) (let ((p2 (-. q2 (o_param_z m)))) (let ((m_shape (o_form m))) (if (= m_shape 1) (is_rect_outside m p0 p1 p2) (if (= m_shape 2) (is_plane_outside m p0 p1 p2) (is_second_outside m p0 p1 p2)))))))))) (letrec ((check_all_inside (lambda (ofs iand q0 q1 q2) (let ((head (vector-ref iand ofs))) (if (= head -1) #t (if (is_outside (vector-ref objects head) q0 q1 q2) #f (check_all_inside (+ ofs 1) iand q0 q1 q2))))))) (letrec ((shadow_check_and_group (lambda (iand_ofs and_group) (if (= (vector-ref and_group iand_ofs) -1) #f (let ((obj (vector-ref and_group iand_ofs))) (let ((t0 (solver_fast obj light_dirvec intersection_point))) (let ((t0p (vector-ref solver_dist 0))) (if (if (not (= t0 0)) (fless t0p -0.2) #f) (let ((t (+. t0p 0.01))) (let ((q0 (+. (*. (vector-ref light 0) t) (vector-ref intersection_point 0)))) (let ((q1 (+. (*. (vector-ref light 1) t) (vector-ref intersection_point 1)))) (let ((q2 (+. (*. (vector-ref light 2) t) (vector-ref intersection_point 2)))) (if (check_all_inside 0 and_group q0 q1 q2) #t (shadow_check_and_group (+ iand_ofs 1) and_group)))))) (if (o_isinvert (vector-ref objects obj)) (shadow_check_and_group (+ iand_ofs 1) and_group) #f))))))))) (letrec ((shadow_check_one_or_group (lambda (ofs or_group) (let ((head (vector-ref or_group ofs))) (if (= head -1) #f (let ((and_group (vector-ref and_net head))) (let ((shadow_p (shadow_check_and_group 0 and_group))) (if shadow_p #t (shadow_check_one_or_group (+ ofs 1) or_group))))))))) (letrec ((shadow_check_one_or_matrix (lambda (ofs or_matrix) (let ((head (vector-ref or_matrix ofs))) (let ((range_primitive (vector-ref head 0))) (if (= range_primitive -1) #f (if (if (= range_primitive 99) #t (let ((t (solver_fast range_primitive light_dirvec intersection_point))) (if (not (= t 0)) (if (fless (vector-ref solver_dist 0) -0.1) (if (shadow_check_one_or_group 1 head) #t #f) #f) #f))) (if (shadow_check_one_or_group 1 head) #t (shadow_check_one_or_matrix (+ ofs 1) or_matrix)) (shadow_check_one_or_matrix (+ ofs 1) or_matrix)))))))) (letrec ((solve_each_element (lambda (iand_ofs and_group dirvec) (let ((iobj (vector-ref and_group iand_ofs))) (if (= iobj -1) 0 (let ((t0 (solver iobj dirvec startp))) (if (not (= t0 0)) (let ((t0p (vector-ref solver_dist 0))) (let ((Tu109 (if (fless 0.0 t0p) (if (fless t0p (vector-ref tmin 0)) (let ((t (+. t0p 0.01))) (let ((q0 (+. (*. (vector-ref dirvec 0) t) (vector-ref startp 0)))) (let ((q1 (+. (*. (vector-ref dirvec 1) t) (vector-ref startp 1)))) (let ((q2 (+. (*. (vector-ref dirvec 2) t) (vector-ref startp 2)))) (if (check_all_inside 0 and_group q0 q1 q2) (let ((Tu108 (vector-set! tmin 0 t))) (let ((Tu107 (vecset intersection_point q0 q1 q2))) (let ((Tu106 (vector-set! intersected_object_id 0 iobj))) (vector-set! intsec_rectside 0 t0)))) 0))))) 0) 0))) (solve_each_element (+ iand_ofs 1) and_group dirvec))) (if (o_isinvert (vector-ref objects iobj)) (solve_each_element (+ iand_ofs 1) and_group dirvec) 0)))))))) (letrec ((solve_one_or_network (lambda (ofs or_group dirvec) (let ((head (vector-ref or_group ofs))) (if (not (= head -1)) (let ((and_group (vector-ref and_net head))) (let ((Tu110 (solve_each_element 0 and_group dirvec))) (solve_one_or_network (+ ofs 1) or_group dirvec))) 0))))) (letrec ((trace_or_matrix (lambda (ofs or_network dirvec) (let ((head (vector-ref or_network ofs))) (let ((range_primitive (vector-ref head 0))) (if (= range_primitive -1) 0 (let ((Tu111 (if (= range_primitive 99) (solve_one_or_network 1 head dirvec) (let ((t (solver range_primitive dirvec startp))) (if (not (= t 0)) (let ((tp (vector-ref solver_dist 0))) (if (fless tp (vector-ref tmin 0)) (solve_one_or_network 1 head dirvec) 0)) 0))))) (trace_or_matrix (+ ofs 1) or_network dirvec)))))))) (letrec ((judge_intersection (lambda (dirvec) (let ((Tu113 (vector-set! tmin 0 1.0e9))) (let ((Tu112 (trace_or_matrix 0 (vector-ref or_net 0) dirvec))) (let ((t (vector-ref tmin 0))) (if (fless -0.1 t) (fless t 100000000.0) #f))))))) (letrec ((solve_each_element_fast (lambda (iand_ofs and_group dirvec) (let ((vec (d_vec dirvec))) (let ((iobj (vector-ref and_group iand_ofs))) (if (= iobj -1) 0 (let ((t0 (solver_fast2 iobj dirvec))) (if (not (= t0 0)) (let ((t0p (vector-ref solver_dist 0))) (let ((Tu117 (if (fless 0.0 t0p) (if (fless t0p (vector-ref tmin 0)) (let ((t (+. t0p 0.01))) (let ((q0 (+. (*. (vector-ref vec 0) t) (vector-ref startp_fast 0)))) (let ((q1 (+. (*. (vector-ref vec 1) t) (vector-ref startp_fast 1)))) (let ((q2 (+. (*. (vector-ref vec 2) t) (vector-ref startp_fast 2)))) (if (check_all_inside 0 and_group q0 q1 q2) (let ((Tu116 (vector-set! tmin 0 t))) (let ((Tu115 (vecset intersection_point q0 q1 q2))) (let ((Tu114 (vector-set! intersected_object_id 0 iobj))) (vector-set! intsec_rectside 0 t0)))) 0))))) 0) 0))) (solve_each_element_fast (+ iand_ofs 1) and_group dirvec))) (if (o_isinvert (vector-ref objects iobj)) (solve_each_element_fast (+ iand_ofs 1) and_group dirvec) 0))))))))) (letrec ((solve_one_or_network_fast (lambda (ofs or_group dirvec) (let ((head (vector-ref or_group ofs))) (if (not (= head -1)) (let ((and_group (vector-ref and_net head))) (let ((Tu118 (solve_each_element_fast 0 and_group dirvec))) (solve_one_or_network_fast (+ ofs 1) or_group dirvec))) 0))))) (letrec ((trace_or_matrix_fast (lambda (ofs or_network dirvec) (let ((head (vector-ref or_network ofs))) (let ((range_primitive (vector-ref head 0))) (if (= range_primitive -1) 0 (let ((Tu119 (if (= range_primitive 99) (solve_one_or_network_fast 1 head dirvec) (let ((t (solver_fast2 range_primitive dirvec))) (if (not (= t 0)) (let ((tp (vector-ref solver_dist 0))) (if (fless tp (vector-ref tmin 0)) (solve_one_or_network_fast 1 head dirvec) 0)) 0))))) (trace_or_matrix_fast (+ ofs 1) or_network dirvec)))))))) (letrec ((judge_intersection_fast (lambda (dirvec) (let ((Tu121 (vector-set! tmin 0 1.0e9))) (let ((Tu120 (trace_or_matrix_fast 0 (vector-ref or_net 0) dirvec))) (let ((t (vector-ref tmin 0))) (if (fless -0.1 t) (fless t 100000000.0) #f))))))) (letrec ((get_nvector_rect (lambda (dirvec) (let ((rectside (vector-ref intsec_rectside 0))) (let ((Tu122 (vecbzero nvector))) (vector-set! nvector (- rectside 1) (fneg (sgn (vector-ref dirvec (- rectside 1)))))))))) (letrec ((get_nvector_plane (lambda (m) (let ((Tu124 (vector-set! nvector 0 (fneg (o_param_a m))))) (let ((Tu123 (vector-set! nvector 1 (fneg (o_param_b m))))) (vector-set! nvector 2 (fneg (o_param_c m)))))))) (letrec ((get_nvector_second (lambda (m) (let ((p0 (-. (vector-ref intersection_point 0) (o_param_x m)))) (let ((p1 (-. (vector-ref intersection_point 1) (o_param_y m)))) (let ((p2 (-. (vector-ref intersection_point 2) (o_param_z m)))) (let ((d0 (*. p0 (o_param_a m)))) (let ((d1 (*. p1 (o_param_b m)))) (let ((d2 (*. p2 (o_param_c m)))) (let ((Tu129 (if (= (o_isrot m) 0) (let ((Tu126 (vector-set! nvector 0 d0))) (let ((Tu125 (vector-set! nvector 1 d1))) (vector-set! nvector 2 d2))) (let ((Tu128 (vector-set! nvector 0 (+. d0 (fhalf (+. (*. p1 (o_param_r3 m)) (*. p2 (o_param_r2 m)))))))) (let ((Tu127 (vector-set! nvector 1 (+. d1 (fhalf (+. (*. p0 (o_param_r3 m)) (*. p2 (o_param_r1 m)))))))) (vector-set! nvector 2 (+. d2 (fhalf (+. (*. p0 (o_param_r2 m)) (*. p1 (o_param_r1 m))))))))))) (vecunit_sgn nvector (o_isinvert m)))))))))))) (letrec ((get_nvector (lambda (m dirvec) (let ((m_shape (o_form m))) (if (= m_shape 1) (get_nvector_rect dirvec) (if (= m_shape 2) (get_nvector_plane m) (get_nvector_second m))))))) (letrec ((utexture (lambda (m p) (let ((m_tex (o_texturetype m))) (let ((Tu134 (vector-set! texture_color 0 (o_color_red m)))) (let ((Tu133 (vector-set! texture_color 1 (o_color_green m)))) (let ((Tu132 (vector-set! texture_color 2 (o_color_blue m)))) (if (= m_tex 1) (let ((w1 (-. (vector-ref p 0) (o_param_x m)))) (let ((flag1 (let ((d1 (*. (floor (*. w1 0.05)) 20.0))) (fless (-. w1 d1) 10.0)))) (let ((w3 (-. (vector-ref p 2) (o_param_z m)))) (let ((flag2 (let ((d2 (*. (floor (*. w3 0.05)) 20.0))) (fless (-. w3 d2) 10.0)))) (vector-set! texture_color 1 (if flag1 (if flag2 255.0 0.0) (if flag2 0.0 255.0))))))) (if (= m_tex 2) (let ((w2 (fsqr (sin (*. (vector-ref p 1) 0.25))))) (let ((Tu130 (vector-set! texture_color 0 (*. 255.0 w2)))) (vector-set! texture_color 1 (*. 255.0 (-. 1.0 w2))))) (if (= m_tex 3) (let ((w1 (-. (vector-ref p 0) (o_param_x m)))) (let ((w3 (-. (vector-ref p 2) (o_param_z m)))) (let ((w2 (/. (sqrt (+. (fsqr w1) (fsqr w3))) 10.0))) (let ((w4 (*. (-. w2 (floor w2)) 3.141593))) (let ((cws (fsqr (cos w4)))) (let ((Tu131 (vector-set! texture_color 1 (*. cws 255.0)))) (vector-set! texture_color 2 (*. (-. 1.0 cws) 255.0)))))))) (if (= m_tex 4) (let ((w1 (*. (-. (vector-ref p 0) (o_param_x m)) (sqrt (o_param_a m))))) (let ((w3 (*. (-. (vector-ref p 2) (o_param_z m)) (sqrt (o_param_c m))))) (let ((w4 (+. (fsqr w1) (fsqr w3)))) (let ((w7 (if (fless (fabs w1) 1.0e-4) 15.0 (let ((w5 (fabs (/. w3 w1)))) (/. (*. (atan w5) 30.0) 3.141593))))) (let ((w9 (-. w7 (floor w7)))) (let ((w2 (*. (-. (vector-ref p 1) (o_param_y m)) (sqrt (o_param_b m))))) (let ((w8 (if (fless (fabs w4) 1.0e-4) 15.0 (let ((w6 (fabs (/. w2 w4)))) (/. (*. (atan w6) 30.0) 3.141593))))) (let ((w10 (-. w8 (floor w8)))) (let ((w11 (-. (-. 0.15 (fsqr (-. 0.5 w9))) (fsqr (-. 0.5 w10))))) (let ((w12 (if (fisneg w11) 0.0 w11))) (vector-set! texture_color 2 (/. (*. 255.0 w12) 0.3)))))))))))) 0))))))))))) (letrec ((add_light (lambda (bright hilight hilight_scale) (let ((Tu137 (if (fispos bright) (vecaccum rgb bright texture_color) 0))) (if (fispos hilight) (let ((ihl (*. (fsqr (fsqr hilight)) hilight_scale))) (let ((Tu136 (vector-set! rgb 0 (+. (vector-ref rgb 0) ihl)))) (let ((Tu135 (vector-set! rgb 1 (+. (vector-ref rgb 1) ihl)))) (vector-set! rgb 2 (+. (vector-ref rgb 2) ihl))))) 0))))) (letrec ((trace_reflections (lambda (index diffuse hilight_scale dirvec) (if (>= index 0) (let ((rinfo (vector-ref reflections index))) (let ((dvec (r_dvec rinfo))) (let ((Tu138 (if (judge_intersection_fast dvec) (let ((surface_id (+ (* (vector-ref intersected_object_id 0) 4) (vector-ref intsec_rectside 0)))) (if (= surface_id (r_surface_id rinfo)) (if (not (shadow_check_one_or_matrix 0 (vector-ref or_net 0))) (let ((p (veciprod nvector (d_vec dvec)))) (let ((scale (r_bright rinfo))) (let ((bright (*. (*. scale diffuse) p))) (let ((hilight (*. scale (veciprod dirvec (d_vec dvec))))) (add_light bright hilight hilight_scale))))) 0) 0)) 0))) (trace_reflections (- index 1) diffuse hilight_scale dirvec)))) 0)))) (letrec ((trace_ray (lambda (nref energy dirvec pixel dist) (if (<= nref 4) (let ((surface_ids (p_surface_ids pixel))) (if (judge_intersection dirvec) (let ((obj_id (vector-ref intersected_object_id 0))) (let ((obj (vector-ref objects obj_id))) (let ((m_surface (o_reflectiontype obj))) (let ((diffuse (*. (o_diffuse obj) energy))) (let ((Tu152 (get_nvector obj dirvec))) (let ((Tu151 (veccpy startp intersection_point))) (let ((Tu150 (utexture obj intersection_point))) (let ((Tu149 (vector-set! surface_ids nref (+ (* obj_id 4) (vector-ref intsec_rectside 0))))) (let ((intersection_points (p_intersection_points pixel))) (let ((Tu148 (veccpy (vector-ref intersection_points nref) intersection_point))) (let ((calc_diffuse (p_calc_diffuse pixel))) (let ((Tu147 (if (fless (o_diffuse obj) 0.5) (vector-set! calc_diffuse nref #f) (let ((Tu141 (vector-set! calc_diffuse nref #t))) (let ((energya (p_energy pixel))) (let ((Tu140 (veccpy (vector-ref energya nref) texture_color))) (let ((Tu139 (vecscale (vector-ref energya nref) (*. (/. 1.0 256.0) diffuse)))) (let ((nvectors (p_nvectors pixel))) (veccpy (vector-ref nvectors nref) nvector))))))))) (let ((w (*. -2.0 (veciprod dirvec nvector)))) (let ((Tu146 (vecaccum dirvec w nvector))) (let ((hilight_scale (*. energy (o_hilight obj)))) (let ((Tu145 (if (not (shadow_check_one_or_matrix 0 (vector-ref or_net 0))) (let ((bright (*. (fneg (veciprod nvector light)) diffuse))) (let ((hilight (fneg (veciprod dirvec light)))) (add_light bright hilight hilight_scale))) 0))) (let ((Tu144 (setup_startp intersection_point))) (let ((Tu143 (trace_reflections (- (vector-ref n_reflections 0) 1) diffuse hilight_scale dirvec))) (if (fless 0.1 energy) (let ((Tu142 (if (< nref 4) (vector-set! surface_ids (+ nref 1) -1) 0))) (if (= m_surface 2) (let ((energy2 (*. energy (-. 1.0 (o_diffuse obj))))) (trace_ray (+ nref 1) energy2 dirvec pixel (+. dist (vector-ref tmin 0)))) 0)) 0))))))))))))))))))) (let ((Tu155 (vector-set! surface_ids nref -1))) (if (not (= nref 0)) (let ((hl (fneg (veciprod dirvec light)))) (if (fispos hl) (let ((ihl (*. (*. (*. (fsqr hl) hl) energy) (vector-ref beam 0)))) (let ((Tu154 (vector-set! rgb 0 (+. (vector-ref rgb 0) ihl)))) (let ((Tu153 (vector-set! rgb 1 (+. (vector-ref rgb 1) ihl)))) (vector-set! rgb 2 (+. (vector-ref rgb 2) ihl))))) 0)) 0)))) 0)))) (letrec ((trace_diffuse_ray (lambda (dirvec energy) (if (judge_intersection_fast dirvec) (let ((obj (vector-ref objects (vector-ref intersected_object_id 0)))) (let ((Tu157 (get_nvector obj (d_vec dirvec)))) (let ((Tu156 (utexture obj intersection_point))) (if (not (shadow_check_one_or_matrix 0 (vector-ref or_net 0))) (let ((br (fneg (veciprod nvector light)))) (let ((bright (if (fispos br) br 0.0))) (vecaccum diffuse_ray (*. (*. energy bright) (o_diffuse obj)) texture_color))) 0)))) 0)))) (letrec ((iter_trace_diffuse_rays (lambda (dirvec_group nvector org index) (if (>= index 0) (let ((p (veciprod (d_vec (vector-ref dirvec_group index)) nvector))) (let ((Tu158 (if (fisneg p) (trace_diffuse_ray (vector-ref dirvec_group (+ index 1)) (/. p -150.0)) (trace_diffuse_ray (vector-ref dirvec_group index) (/. p 150.0))))) (iter_trace_diffuse_rays dirvec_group nvector org (- index 2)))) 0)))) (letrec ((trace_diffuse_rays (lambda (dirvec_group nvector org) (let ((Tu159 (setup_startp org))) (iter_trace_diffuse_rays dirvec_group nvector org 118))))) (letrec ((trace_diffuse_ray_80percent (lambda (group_id nvector org) (let ((Tu163 (if (not (= group_id 0)) (trace_diffuse_rays (vector-ref dirvecs 0) nvector org) 0))) (let ((Tu162 (if (not (= group_id 1)) (trace_diffuse_rays (vector-ref dirvecs 1) nvector org) 0))) (let ((Tu161 (if (not (= group_id 2)) (trace_diffuse_rays (vector-ref dirvecs 2) nvector org) 0))) (let ((Tu160 (if (not (= group_id 3)) (trace_diffuse_rays (vector-ref dirvecs 3) nvector org) 0))) (if (not (= group_id 4)) (trace_diffuse_rays (vector-ref dirvecs 4) nvector org) 0)))))))) (letrec ((calc_diffuse_using_1point (lambda (pixel nref) (let ((ray20p (p_received_ray_20percent pixel))) (let ((nvectors (p_nvectors pixel))) (let ((intersection_points (p_intersection_points pixel))) (let ((energya (p_energy pixel))) (let ((Tu165 (veccpy diffuse_ray (vector-ref ray20p nref)))) (let ((Tu164 (trace_diffuse_ray_80percent (p_group_id pixel) (vector-ref nvectors nref) (vector-ref intersection_points nref)))) (vecaccumv rgb (vector-ref energya nref) diffuse_ray)))))))))) (letrec ((calc_diffuse_using_5points (lambda (x prev cur next nref) (let ((r_up (p_received_ray_20percent (vector-ref prev x)))) (let ((r_left (p_received_ray_20percent (vector-ref cur (- x 1))))) (let ((r_center (p_received_ray_20percent (vector-ref cur x)))) (let ((r_right (p_received_ray_20percent (vector-ref cur (+ x 1))))) (let ((r_down (p_received_ray_20percent (vector-ref next x)))) (let ((Tu170 (veccpy diffuse_ray (vector-ref r_up nref)))) (let ((Tu169 (vecadd diffuse_ray (vector-ref r_left nref)))) (let ((Tu168 (vecadd diffuse_ray (vector-ref r_center nref)))) (let ((Tu167 (vecadd diffuse_ray (vector-ref r_right nref)))) (let ((Tu166 (vecadd diffuse_ray (vector-ref r_down nref)))) (let ((energya (p_energy (vector-ref cur x)))) (vecaccumv rgb (vector-ref energya nref) diffuse_ray))))))))))))))) (letrec ((do_without_neighbors (lambda (pixel nref) (if (<= nref 4) (let ((surface_ids (p_surface_ids pixel))) (if (>= (vector-ref surface_ids nref) 0) (let ((calc_diffuse (p_calc_diffuse pixel))) (let ((Tu171 (if (vector-ref calc_diffuse nref) (calc_diffuse_using_1point pixel nref) 0))) (do_without_neighbors pixel (+ nref 1)))) 0)) 0)))) (letrec ((neighbors_exist (lambda (x y next) (if (< (+ y 1) (vector-ref image_size 1)) (if (> y 0) (if (< (+ x 1) (vector-ref image_size 0)) (if (> x 0) #t #f) #f) #f) #f)))) (letrec ((get_surface_id (lambda (pixel index) (let ((surface_ids (p_surface_ids pixel))) (vector-ref surface_ids index))))) (letrec ((neighbors_are_available (lambda (x prev cur next nref) (let ((sid_center (get_surface_id (vector-ref cur x) nref))) (if (= (get_surface_id (vector-ref prev x) nref) sid_center) (if (= (get_surface_id (vector-ref next x) nref) sid_center) (if (= (get_surface_id (vector-ref cur (- x 1)) nref) sid_center) (if (= (get_surface_id (vector-ref cur (+ x 1)) nref) sid_center) #t #f) #f) #f) #f))))) (letrec ((try_exploit_neighbors (lambda (x y prev cur next nref) (let ((pixel (vector-ref cur x))) (if (<= nref 4) (if (>= (get_surface_id pixel nref) 0) (if (neighbors_are_available x prev cur next nref) (let ((calc_diffuse (p_calc_diffuse pixel))) (let ((Tu172 (if (vector-ref calc_diffuse nref) (calc_diffuse_using_5points x prev cur next nref) 0))) (try_exploit_neighbors x y prev cur next (+ nref 1)))) (do_without_neighbors (vector-ref cur x) nref)) 0) 0))))) (letrec ((write_ppm_header (lambda (Tu173) (let ((Tu181 (print_char 80))) (let ((Tu180 (print_char (+ 48 3)))) (let ((Tu179 (print_char 10))) (let ((Tu178 (print_int (vector-ref image_size 0)))) (let ((Tu177 (print_char 32))) (let ((Tu176 (print_int (vector-ref image_size 1)))) (let ((Tu175 (print_char 32))) (let ((Tu174 (print_int 255))) (print_char 10)))))))))))) (letrec ((write_rgb_element (lambda (x) (let ((ix (int_of_float x))) (let ((elem (if (> ix 255) 255 (if (< ix 0) 0 ix)))) (print_int elem)))))) (letrec ((write_rgb (lambda (Tu182) (let ((Tu187 (write_rgb_element (vector-ref rgb 0)))) (let ((Tu186 (print_char 32))) (let ((Tu185 (write_rgb_element (vector-ref rgb 1)))) (let ((Tu184 (print_char 32))) (let ((Tu183 (write_rgb_element (vector-ref rgb 2)))) (print_char 10))))))))) (letrec ((pretrace_diffuse_rays (lambda (pixel nref) (if (<= nref 4) (let ((sid (get_surface_id pixel nref))) (if (>= sid 0) (let ((calc_diffuse (p_calc_diffuse pixel))) (let ((Tu190 (if (vector-ref calc_diffuse nref) (let ((group_id (p_group_id pixel))) (let ((Tu189 (vecbzero diffuse_ray))) (let ((nvectors (p_nvectors pixel))) (let ((intersection_points (p_intersection_points pixel))) (let ((Tu188 (trace_diffuse_rays (vector-ref dirvecs group_id) (vector-ref nvectors nref) (vector-ref intersection_points nref)))) (let ((ray20p (p_received_ray_20percent pixel))) (veccpy (vector-ref ray20p nref) diffuse_ray))))))) 0))) (pretrace_diffuse_rays pixel (+ nref 1)))) 0)) 0)))) (letrec ((pretrace_pixels (lambda (line x group_id lc0 lc1 lc2) (if (>= x 0) (let ((xdisp (*. (vector-ref scan_pitch 0) (float_of_int (- x (vector-ref image_center 0)))))) (let ((Tu200 (vector-set! ptrace_dirvec 0 (+. (*. xdisp (vector-ref screenx_dir 0)) lc0)))) (let ((Tu199 (vector-set! ptrace_dirvec 1 (+. (*. xdisp (vector-ref screenx_dir 1)) lc1)))) (let ((Tu198 (vector-set! ptrace_dirvec 2 (+. (*. xdisp (vector-ref screenx_dir 2)) lc2)))) (let ((Tu197 (vecunit_sgn ptrace_dirvec #f))) (let ((Tu196 (vecbzero rgb))) (let ((Tu195 (veccpy startp viewpoint))) (let ((Tu194 (trace_ray 0 1.0 ptrace_dirvec (vector-ref line x) 0.0))) (let ((Tu193 (veccpy (p_rgb (vector-ref line x)) rgb))) (let ((Tu192 (p_set_group_id (vector-ref line x) group_id))) (let ((Tu191 (pretrace_diffuse_rays (vector-ref line x) 0))) (pretrace_pixels line (- x 1) (add_mod5 group_id 1) lc0 lc1 lc2)))))))))))) 0)))) (letrec ((pretrace_line (lambda (line y group_id) (let ((ydisp (*. (vector-ref scan_pitch 0) (float_of_int (- y (vector-ref image_center 1)))))) (let ((lc0 (+. (*. ydisp (vector-ref screeny_dir 0)) (vector-ref screenz_dir 0)))) (let ((lc1 (+. (*. ydisp (vector-ref screeny_dir 1)) (vector-ref screenz_dir 1)))) (let ((lc2 (+. (*. ydisp (vector-ref screeny_dir 2)) (vector-ref screenz_dir 2)))) (pretrace_pixels line (- (vector-ref image_size 0) 1) group_id lc0 lc1 lc2)))))))) (letrec ((scan_pixel (lambda (x y prev cur next) (if (< x (vector-ref image_size 0)) (let ((Tu203 (veccpy rgb (p_rgb (vector-ref cur x))))) (let ((Tu202 (if (neighbors_exist x y next) (try_exploit_neighbors x y prev cur next 0) (do_without_neighbors (vector-ref cur x) 0)))) (let ((Tu201 (write_rgb 0))) (scan_pixel (+ x 1) y prev cur next)))) 0)))) (letrec ((scan_line (lambda (y prev cur next group_id) (if (< y (vector-ref image_size 1)) (let ((Tu205 (if (< y (- (vector-ref image_size 1) 1)) (pretrace_line next (+ y 1) group_id) 0))) (let ((Tu204 (scan_pixel 0 y prev cur next))) (scan_line (+ y 1) cur next prev (add_mod5 group_id 2)))) 0)))) (letrec ((create_float5x3array (lambda (Tu206) (let ((vec (create_array 3 0.0))) (let ((array (create_array 5 vec))) (let ((Tu210 (vector-set! array 1 (create_array 3 0.0)))) (let ((Tu209 (vector-set! array 2 (create_array 3 0.0)))) (let ((Tu208 (vector-set! array 3 (create_array 3 0.0)))) (let ((Tu207 (vector-set! array 4 (create_array 3 0.0)))) array))))))))) (letrec ((create_pixel (lambda (Tu211) (let ((m_rgb (create_array 3 0.0))) (let ((m_isect_ps (create_float5x3array 0))) (let ((m_sids (create_array 5 0))) (let ((m_cdif (create_array 5 #f))) (let ((m_engy (create_float5x3array 0))) (let ((m_r20p (create_float5x3array 0))) (let ((m_gid (create_array 1 0))) (let ((m_nvectors (create_float5x3array 0))) (vector m_rgb m_isect_ps m_sids m_cdif m_engy m_r20p m_gid m_nvectors)))))))))))) (letrec ((init_line_elements (lambda (line n) (if (>= n 0) (let ((Tu212 (vector-set! line n (create_pixel 0)))) (init_line_elements line (- n 1))) line)))) (letrec ((create_pixelline (lambda (Tu213) (let ((line (create_array (vector-ref image_size 0) (create_pixel 0)))) (init_line_elements line (- (vector-ref image_size 0) 2)))))) (letrec ((tan (lambda (x) (/. (sin x) (cos x))))) (letrec ((adjust_position (lambda (h ratio) (let ((l (sqrt (+. (*. h h) 0.1)))) (let ((tan_h (/. 1.0 l))) (let ((theta_h (atan tan_h))) (let ((tan_m (tan (*. theta_h ratio)))) (*. tan_m l)))))))) (letrec ((calc_dirvec (lambda (icount x y rx ry group_id index) (if (>= icount 5) (let ((l (sqrt (+. (+. (fsqr x) (fsqr y)) 1.0)))) (let ((vx (/. x l))) (let ((vy (/. y l))) (let ((vz (/. 1.0 l))) (let ((dgroup (vector-ref dirvecs group_id))) (let ((Tu218 (vecset (d_vec (vector-ref dgroup index)) vx vy vz))) (let ((Tu217 (vecset (d_vec (vector-ref dgroup (+ index 40))) vx vz (fneg vy)))) (let ((Tu216 (vecset (d_vec (vector-ref dgroup (+ index 80))) vz (fneg vx) (fneg vy)))) (let ((Tu215 (vecset (d_vec (vector-ref dgroup (+ index 1))) (fneg vx) (fneg vy) (fneg vz)))) (let ((Tu214 (vecset (d_vec (vector-ref dgroup (+ index 41))) (fneg vx) (fneg vz) vy))) (vecset (d_vec (vector-ref dgroup (+ index 81))) (fneg vz) vx vy))))))))))) (let ((x2 (adjust_position y rx))) (calc_dirvec (+ icount 1) x2 (adjust_position x2 ry) rx ry group_id index)))))) (letrec ((calc_dirvecs (lambda (col ry group_id index) (if (>= col 0) (let ((rx (-. (*. (float_of_int col) 0.2) 0.9))) (let ((Tu220 (calc_dirvec 0 0.0 0.0 rx ry group_id index))) (let ((rx2 (+. (*. (float_of_int col) 0.2) 0.1))) (let ((Tu219 (calc_dirvec 0 0.0 0.0 rx2 ry group_id (+ index 2)))) (calc_dirvecs (- col 1) ry (add_mod5 group_id 1) index))))) 0)))) (letrec ((calc_dirvec_rows (lambda (row group_id index) (if (>= row 0) (let ((ry (-. (*. (float_of_int row) 0.2) 0.9))) (let ((Tu221 (calc_dirvecs 4 ry group_id index))) (calc_dirvec_rows (- row 1) (add_mod5 group_id 2) (+ index 4)))) 0)))) (letrec ((create_dirvec (lambda (Tu222) (let ((v3 (create_array 3 0.0))) (let ((consts (create_array (vector-ref n_objects 0) v3))) (vector v3 consts)))))) (letrec ((create_dirvec_elements (lambda (d index) (if (>= index 0) (let ((Tu223 (vector-set! d index (create_dirvec 0)))) (create_dirvec_elements d (- index 1))) 0)))) (letrec ((create_dirvecs (lambda (index) (if (>= index 0) (let ((Tu225 (vector-set! dirvecs index (create_array 120 (create_dirvec 0))))) (let ((Tu224 (create_dirvec_elements (vector-ref dirvecs index) 118))) (create_dirvecs (- index 1)))) 0)))) (letrec ((init_dirvec_constants (lambda (vecset index) (if (>= index 0) (let ((Tu226 (setup_dirvec_constants (vector-ref vecset index)))) (init_dirvec_constants vecset (- index 1))) 0)))) (letrec ((init_vecset_constants (lambda (index) (if (>= index 0) (let ((Tu227 (init_dirvec_constants (vector-ref dirvecs index) 119))) (init_vecset_constants (- index 1))) 0)))) (letrec ((init_dirvecs (lambda (Tu228) (let ((Tu230 (create_dirvecs 4))) (let ((Tu229 (calc_dirvec_rows 9 0 0))) (init_vecset_constants 4)))))) (letrec ((add_reflection (lambda (index surface_id bright v0 v1 v2) (let ((dvec (create_dirvec 0))) (let ((Tu232 (vecset (d_vec dvec) v0 v1 v2))) (let ((Tu231 (setup_dirvec_constants dvec))) (vector-set! reflections index (vector surface_id dvec bright)))))))) (letrec ((setup_rect_reflection (lambda (obj_id obj) (let ((sid (* obj_id 4))) (let ((nr (vector-ref n_reflections 0))) (let ((br (-. 1.0 (o_diffuse obj)))) (let ((n0 (fneg (vector-ref light 0)))) (let ((n1 (fneg (vector-ref light 1)))) (let ((n2 (fneg (vector-ref light 2)))) (let ((Tu235 (add_reflection nr (+ sid 1) br (vector-ref light 0) n1 n2))) (let ((Tu234 (add_reflection (+ nr 1) (+ sid 2) br n0 (vector-ref light 1) n2))) (let ((Tu233 (add_reflection (+ nr 2) (+ sid 3) br n0 n1 (vector-ref light 2)))) (vector-set! n_reflections 0 (+ nr 3)))))))))))))) (letrec ((setup_surface_reflection (lambda (obj_id obj) (let ((sid (+ (* obj_id 4) 1))) (let ((nr (vector-ref n_reflections 0))) (let ((br (-. 1.0 (o_diffuse obj)))) (let ((p (veciprod light (o_param_abc obj)))) (let ((Tu236 (add_reflection nr sid br (-. (*. (*. 2.0 (o_param_a obj)) p) (vector-ref light 0)) (-. (*. (*. 2.0 (o_param_b obj)) p) (vector-ref light 1)) (-. (*. (*. 2.0 (o_param_c obj)) p) (vector-ref light 2))))) (vector-set! n_reflections 0 (+ nr 1)))))))))) (letrec ((setup_reflections (lambda (obj_id) (if (>= obj_id 0) (let ((obj (vector-ref objects obj_id))) (if (= (o_reflectiontype obj) 2) (if (fless (o_diffuse obj) 1.0) (let ((m_shape (o_form obj))) (if (= m_shape 1) (setup_rect_reflection obj_id obj) (if (= m_shape 2) (setup_surface_reflection obj_id obj) 0))) 0) 0)) 0)))) (letrec ((rt (lambda (size_x size_y) (let ((Tu248 (vector-set! image_size 0 size_x))) (let ((Tu247 (vector-set! image_size 1 size_y))) (let ((Tu246 (vector-set! image_center 0 (/ size_x 2)))) (let ((Tu245 (vector-set! image_center 1 (/ size_y 2)))) (let ((Tu244 (vector-set! scan_pitch 0 (/. 128.0 (float_of_int size_x))))) (let ((prev (create_pixelline 0))) (let ((cur (create_pixelline 0))) (let ((next (create_pixelline 0))) (let ((Tu243 (read_parameter 0))) (let ((Tu242 (write_ppm_header 0))) (let ((Tu241 (init_dirvecs 0))) (let ((Tu240 (veccpy (d_vec light_dirvec) light))) (let ((Tu239 (setup_dirvec_constants light_dirvec))) (let ((Tu238 (setup_reflections (- (vector-ref n_objects 0) 1)))) (let ((Tu237 (pretrace_line cur 0 0))) (scan_line 0 prev cur next 2))))))))))))))))))) (let ((Tu249 (rt 16 16))) 0))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
